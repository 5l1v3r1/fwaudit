Firmware Audit (FWAudit) User's Guide
=====================================


Introduction:

Firmware Audit (fwaudit) is a platform firmware test utility. It runs tests
and gathers diagnostic and security information about a system's firmware.
The target audience are: System Administrators, Site Reliability Engineers,
DFIR, and enterprise Blue Teams. FWAudit is a front-end to multiple tools,
both 'live' and 'offline' firmware analysis and diagnostic tools. Initially,
the main tools are the CHIPSEC project and the FirmWare Test Suite (FWTS). 
More tools are planned for future versions. FWAudit is GPLv2-licensed
Open Source -- technically Free Software -- Python tool.

It currently works on Intel x64 UEFI systems running Debian Linux.
More architectures and operating systems are planned for future versions.


Prerequisites:

The current release of fwaudit has the following system restrictions:

* architecture: Intel x64 
* firmware: BIOS, UEFI, ACPI
* operating systems: Debian GNU/Linux
* tools: CHIPSEC, FWTS, ACPICA tools (acpidump, acpixtract), lspci, lsusb
* Python: requires the CPython 2.7x. Reason: the UEFI Shell version of Python
  is CPython 2.7x, which CHIPSEC for UEFI relies on (and bundles).
  UPDATE: Intel has recently ported MicroPython to UEFI, so this requirement
  may soon change.

Future versions hope to include support for more operating systems,
firmware, and architectures.


Installing:

Install CPython 2.7x for your Linux distribution. Something like:

$ sudo apt install python
$ sudo apt-get install -y python-pip

M1 has no packaging.
The M1 release has no setup.py-based installation,
for local pip or online pypi.python.org.
The M1 release does not have any OS-centric packaging: 
Debian DEB, Red Hat RPM, Windows MSI, macOS PKG, etc.
Or able to run as an 'executable zip' (python fwaudit.zip).
Currently no venv/virtualenv support in documentation.
Future versions hope to add additional installation methods... :-)

For M1, download the source zip from Github, unzip into a directory,
move into that directory, and run:

$ sudo python2 ./fwaudit.py <options>


Using:

The goal for using FWAudit is to automate gathering of data for a system,
so it can be done regularly over time, so changes in the data can be
detected. Learn what tools work on a particular system, then specify
that set of tools for FWAudit to use, probably via a batch file or 
shell script, that you can re-run each day (or other time period).

Different systems will use different tools, and have different output.
Eg, BIOS systems won't run UEFI tools.


Security Issues:

Super User (root/Administrator) priviliges are required to run FWAudit! A
Python script that requires root, that should scare you... FWAudit invokes
(executes/spawns) multiple other utilities, most of which require Unix root
or Windows Administrative priviliges. For version 0.0.1, there are two methods
to use FWAudit as superuser on Linux systems:

1) Logon as root, and run fwaudit. If running fwaudit as root, not via sudo,
   fwaudit will not modify any generated file ownerships/permissions. All
   files/dirs generated by fwaudit will be owned by root.

2) Logon as a non-root user, who is listed in the sudoers file. Use sudo to
   run fwaudit. If running fawudit via sudo, fwaudit will modify the umask
   and change ownerships/permissions of any generated files to be owned by
   the sudo-calling user, not root, and located in the sudo-caller user's
   home directory, not in the root's home directory. This happens in a few
   places, both before running tools, and running each tool. Before running
   any tools, Fwaudit creates various directories: the 'parent directory',
   the 'per-run directory', and one 'per-tool directory' for each tool run.
   After running each tool, the stdio output is saved; as well, some tools
   generate additional files (eg, a rom.bin).

If fwaudit unexpectedly exits without exiting gracefully, some of the files
in the 'per-tool-directories' may still be owned by root, and will need to
run sudo chown manually to make usable.

In M2, plans are to update FWaudit updates the ownerships/permissions of
these files, after the tool is run.  In M1, no updates occur.

Beyond root and sudo, other methods are not supported in fwaudit 0.0.1.
Using 'su' is currently not supported in 0.1, please use sudo for now.
Additional OS-centric methods to reduce root security issue will be
investigated for future releases:

  * Generate a shellscript of tools to run, instead of running FWAudit.py
  * ACLs/SELinux/AppArmor/chroot/jails/etc.
  * Other? Please file an issue report and/or submit a patch with improved
    methods!

Live tools can't be run in a VM, they must be run against bare-metal, the
point of running them is to test the bare-metal HW/FW. (Exception: using
tools to test VMM's virtualized HW/FW.) Offline tools don't need root, just
read-only access to previously-generated live results, rom.bin/etc files.
Beyond this Unix/Linx-centric root security, the Windows port will require
Windows-centric Administrator-level methods.

Other Security/Testing Issues:

Backup any data on the system before using the tool.

Do not use ACPI suspend/resume in the middle of these tests.

Keep plenty of free disk space on drive that client is run on. The
tool currently does not check if there is enough free disk space before
doing things, until fixed, you need to check for disk space before using.

Don't run multiple instances of this tool, not tested yet, there will
be conflicts of <PRD> file data. Don't use any of the invoked tools (eg,
CHIPSEC, FWTS, etc.) in another process and also call FWAudit (untested
results if there are multiple instances of FWTS, CHIPSEC, etc.)

This code has seen very little testing. Early-adopter testers needed. Many
of the tools it calls have only been used on a small number of systems, they
need more testing as well. The current code has had some manual testing on a
handful of systems the developer had access to. Given the hardware/firmware-
centric data, it needs testing on a wider range of systems. PLEASE file bugs,
especially where invoked tests timeout/hang or otherwise fail!


Generated Directories and Files:

FWAudit generates a lot of output: multiple directories and files for each
tool invoked. Each time FWaudit is run, a new directory is created to store
the results. The tool has 3 uses of directories:

* The Parent Directory (PD) is the top-level directory where all FWAudit
  output is generated. The default PD is, ~/fwaudut.data', the user can
  change it via the --output_dir option. If this directory does not yet
  exist, it is created before the first tool is run.

* A new Per-Run Directory (PRD) directory is created each time FWAudit is
  run, each run's output is stored in a separate directory, the directory
  is named with a YYYYMMDDHHMMSS timestamp format. (Please don't run the
  tool more than once per second, else we'll have to add millseconds to the
  PRD name...)

* Each tool run has it's own Per-Tool Directory (PTD). FWAudit runs the same
  tool in multiple ways, using different command line options, by naming each
  different tool usage with a different 'namespace' name, eg.
  'chipsec_spi_rom_dump' for the 'chipsec_util spi rom dump' command. This
  'namespace' string is used for the PTD.

Running FWaudit generates a <PD>/<PRD>/<PTD> directory heirarchy. Each file
has stdout saved, either separately as <tool>.stdout.txt and
<tool>.stderr.txt, or merged as <tool>.output.txt. If hashing option is
specified, additional sidecar hash files are created for these output files,
eg <tool>.output.txt.sha256. Additionally, each tool may generate additional
files, for example 'chipsec_util spi rom dump' command generates a rom.bin
file. These files are located in the <PTD> along with the the output files.

Tool output can be controlled with --outputmode. There are 3 choices.
'merged' saves both stdout and stderr, merged, to <tool>.output.txt;
merging is done by redirecting stderr to stdout.
'err_first' and 'out_first' both save stdout to <tool>.stdout.txt
and <tool>.stderr.txt. 'err_first' shows stderr before stdout, 'out_first'
shows stdout before stderr.

For M2, plans are to add some additional files to the PRD:
* A JSON dump of the tool's invocation and resulting data.
* An HTML-based web page with the resulting test data from each tool run.
* A sha256sum-compatible ASCII text manifest file that lists all generated
  files from each tool run, and their hashes (in addition to sidecar hash
  files).


Tools and Profiles:

FWAudit can run one tool, or multiple tools; at least one tool is needed for
FWAudit to do anything useful. FWAudit has an internal list of tools it
understands, as well as an internal list of profiles, each profile is a list
of multiple tools. The user can specify 1-N profiles and/or 1-N tools.

In M1, there are only a few supported tools, and the profiles are not
useful yet.

The list of available tools is availiable via the --list_tools option.
A tool can be selected using the --tool (-t) option; this option can be
specified multiple times on the command line, each time one new tool is
specified.

The list of available profiles is available via the --list_profiles option.
A profile can be selected using the --profile (-p) option; this option can
be specified multiple times on the command line.

WARNING: In M1, don't run the same tool or profile multiple times (eg 
'-t lspci -t lspci -t lspci' or '-p foo -p foo'), there is a bug that
results in output of all but the last invocation of tool.

The current release is not tool/profile-extensible by the user, the source
code must be edited. A future release (M2) will move all tool/profile-centric
data into a user-editable JSON data file.

==========

Resources:

Please see the file README.txt for a list of online resources
for more information about FWAudit.

==========

Acknowledgements:

This tool would not be possible without the efforts by the various
tools it invokes, most notably the CHIPSEC and FWTS projects.

==========

EOF
